"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IoCGenerator = void 0;
const registrationsParser_1 = __importDefault(require("./generator/registrationsParser"));
const liquidjs_1 = require("liquidjs");
const path = __importStar(require("path"));
const filters_1 = require("./generator/templates/filters");
const templateDir = path.join(__dirname, 'generator', 'templates');
const resolverTemplatePath = path.join(templateDir, 'resolver.liquid');
const symbolTypesTemplatePath = path.join(templateDir, 'types.liquid');
const serviceProviderTemplatePath = path.join(templateDir, 'serviceProvider.liquid');
const liquid = new liquidjs_1.Liquid();
liquid.registerFilter('toImport', filters_1.toImportFilter);
liquid.registerFilter('toSymbolPath', filters_1.toSymbolPath);
const parser = new registrationsParser_1.default();
class IoCGenerator {
    constructor(writer) {
        this._writer = writer;
    }
    generate(parameters) {
        console.log(JSON.stringify(parameters));
        if (!parameters || !parameters.registrationFilePath) {
            throw Error(`The source registration file path is required`);
        }
        if (!parameters.registrationClassName) {
            throw Error(`The source registration class name is required`);
        }
        if (!parameters.outputDirectory) {
            throw Error(`The output directory path is required`);
        }
        const registrations = parser.parse(parameters);
        const allSymbols = [];
        const namespaces = [];
        const resolvers = [];
        for (const r of registrations) {
            const resolverName = [r.instance.displayName, r.service.displayName].join('Of') + `${r.scope}ServiceResolver`;
            const outputFile = resolverName[0].toLowerCase() + resolverName.substring(1, resolverName.length);
            this.renderToOutput(parameters, `${outputFile}.ts`, resolverTemplatePath, {
                registration: r,
                outputDir: parameters.outputDirectory
            });
            const symbol = r.service.symbolDescriptor;
            if (symbol.autoGenerated) {
                if (allSymbols.findIndex(s => s.symbolId === symbol.symbolId && s.symbolNamespace === symbol.symbolNamespace) === -1) {
                    allSymbols.push(symbol);
                }
                if (namespaces.findIndex(n => n === symbol.symbolNamespace) === -1) {
                    namespaces.push(symbol.symbolNamespace);
                }
            }
            resolvers.push(outputFile);
        }
        this.renderToOutput(parameters, "types.generated.ts", symbolTypesTemplatePath, { namespaces, symbols: allSymbols });
        this.renderToOutput(parameters, "index.ts", serviceProviderTemplatePath, { resolvers: resolvers });
        return resolvers;
    }
    renderToOutput(parameters, outputFile, templatePath, renderModel) {
        const filePath = path.join(parameters.outputDirectory, outputFile);
        const content = liquid.renderFileSync(templatePath, renderModel);
        this._writer.write(filePath, content);
    }
}
exports.IoCGenerator = IoCGenerator;
