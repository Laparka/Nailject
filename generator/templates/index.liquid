import * as __SYMBOL_TYPES from './types.generated';
import ServiceResolversRegistry from '@tsinjector/api/serviceResolversRegistry';
import { ServiceProvider, CompiledServiceProvider } from '@tsinjector/api/serviceProvider';

{%- for resolver in resolvers -%}
{%- capture newLine -%}
{%- endcapture -%}
{{ newLine }}
import {{ resolver.className }} from './{{ resolver.fileName }}';
{%- endfor -%}

{%- capture newLine -%}
{%- endcapture -%}
{{ newLine }}

const compiledServiceProvider = new CompiledServiceProvider();
const registry: ServiceResolversRegistry = compiledServiceProvider;
{%- capture newLine -%}
{% endcapture %}
{{ newLine }}
{%- for resolver in resolvers -%}
registry.registerResolver(__SYMBOL_TYPES.{%- if resolver.symbol.symbolNamespace == "" -%}not_defined_symbol_namespace{%-else -%}{{ resolver.symbol.symbolNamespace }}{%- endif %}.{{ resolver.symbol.symbolId }}, new {{ resolver.className }}());
{% capture newLine %}
{%- endcapture -%}
{{ newLine }}
{%- endfor -%}

export const serviceProvider: ServiceProvider = compiledServiceProvider;