{%- for import in imports -%}
    {%- if import.kind == 'Named' -%}
        {%- if import.name == import.alias -%}
import { {{ import.name }} } from '{{ import.path }}';
        {%- else -%}
import { {{ import.name }} as {{ import.alias }} } from '{{ import.path }}';
        {%- endif -%}
    {%-  elsif import.kind == 'Namespace' -%}
import * as {{ import.alias }} from '{{ import.path }}';
    {%-  elsif import.kind == 'Default' -%}
import {{ import.name }} from '{{ import.path }}';
    {%- endif -%}
{%- capture newLine -%}
{% endcapture %}
{{ newLine }}
{%- endfor -%}
{%- if instance.constructorArgs.size != 0 -%}
import * as __SERVICE_TYPE_SYMBOLS from './types.generated';
{% endif %}
import { {{ scope }}ServiceResolver, InstanceConstructor } from '@pileuple/api/serviceResolver';
import { ServiceProvider } from '@pileuple/api/serviceProvider';

export default class {{instance.displayName}}Of{{ service.displayName }}{{ scope }}ServiceResolver extends {{ scope }}ServiceResolver<{{service.accessorDeclaration}}> {
    doResolve(serviceProvider: ServiceProvider): {{service.accessorDeclaration}} {
        const ctor: InstanceConstructor<{{ instance.accessorDeclaration }}> = {{ instance.constructorType }};
{%- for ctorSymbol in instance.constructorArgs -%}
{%- capture ctorServiceStatement -%}
        {%- if ctorSymbol.isCollection == true -%}
        const service{{ forloop.index }} = serviceProvider.resolveMany(__SERVICE_TYPE_SYMBOLS.{{ ctorSymbol.symbolPath }});
        {%- else -%}
        const service{{ forloop.index }} = serviceProvider.resolveOne(__SERVICE_TYPE_SYMBOLS.{{ ctorSymbol.symbolPath }});
        {%- endif -%}
{% endcapture %}
        {{ ctorServiceStatement }}
{%- endfor -%}
{%- capture newLine -%}
{% endcapture %}
{{ newLine }}
        return new ctor(
{%- if instance.constructorArgs.size != 0 -%}
    {%- for arg in (0..instance.constructorArgs.size) -%}
        {%- if arg != 0 -%}
service{{ arg }}
            {%- if forloop.index <= instance.constructorArgs.size -%},{%- endif-%}
        {%- endif -%}
    {%- endfor -%}
{%- endif -%});
    }
}