{%- assign imports = registration | get_imports -%}
{%- for importModel in imports -%}
{{ importModel | write_import: outputDir }}
{% endfor %}

class Resolver extends {{ registration.scope }}ServiceResolver<{{ registration.service.accessor | get_type: true }}> {
    protected doResolve(serviceProvider: ServiceProvider): {{ registration.service.accessor | get_type: true }} {
        const ctor: InstanceConstructor<{{ registration.instance.accessor | get_type: true }}> = {{ registration.instance.accessor | get_type: false }};
        const args: any[] = [];
{%- for ctorArg in registration.instance.constructorArgs -%}
{%- capture ctorLine -%}
{% endcapture %}
        {{ ctorLine }}
        args.push(serviceProvider.
    {%- if ctorArg.isArray -%}
        resolveMany(
    {%- else -%}
        resolveOne(
    {%- endif %}
    {%- if ctorArg.symbolDescriptor.autoGenerated -%}
        {{ ctorArg.symbolDescriptor.accessor | get_symbol }}
    {%- else -%}
        args.push({{ ctorArg.symbolDescriptor.accessor | get_type: false }}
    {%- endif -%}
    ));
{%- endfor -%}
{% capture newLine %}
{%- endcapture -%}
        {{ newLine }}
        return new ctor(...args);
    }
}