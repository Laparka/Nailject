{%- assign imports = registration | get_imports -%}
{%- for importModel in imports -%}
{{ importModel | write_import: outputDir }}
{% endfor %}

class Resolver extends {{ registration.scope }}ServiceResolver<{{ registration.service.accessor | read_accessor: true }}> {
    protected doResolve(serviceProvider: ServiceProvider): {{ registration.service.accessor | read_accessor: true }} {
        const ctor: InstanceConstructor<{{ registration.instance.accessor | read_accessor: true }}> = {{ registration.instance.accessor | read_accessor: false }};
        const args: any[] = [];
{% for ctorArg in registration.instance.constructorArgs %}
        args.push(serviceProvider.resolve{{ ctorArg.resolveType }}({{ ctorArg.symbolDescriptor | read_accessor: false }}));
{%- endfor -%}
{% capture newLine %}
{%- endcapture -%}
        {{ newLine }}
        return new ctor(...args);
    }
}